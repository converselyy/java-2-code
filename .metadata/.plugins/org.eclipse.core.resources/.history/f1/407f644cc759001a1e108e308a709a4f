// COURSE: CSCI1620
// TERM: Spring 2020
//
// NAME: Brandon Cline
// RESOURCES: I had to refresh my memory on finding GCDs. In the end, I used a calculator.

package recursionlab;
import static org.junit.Assert.assertEquals;

import org.junit.Test;

/**
 * Includes JUnit test cases for testing the LittleRecursions' class methods.
 * Also, palindromes are fun to type, but the word palindrome is strange
 * because I always start typing pailindrome.
 * 
 * @author bcline
 */
public class LittleRecursionsTest
{
	/*********** isPalindrome() testing ***********/
	/**
	 * Testing isPalindrome() with an all caps string.
	 */
	@Test
	public void testIsPalindromeAllCaps()
	{	
		assertEquals(true, LittleRecursions.isPalindrome("RACECAR"));
	}
	
	/**
	 * Testing isPalindrome() with varying capitalisation.
	 */
	@Test
	public void testIsPalindromeVaryingCaps()
	{
		assertEquals(true, LittleRecursions.isPalindrome("aBbA"));
	}
	
	/**
	 * Testing isPalindrome() with a lower-case string.
	 */
	@Test
	public void testIsPalindromeLowerCase()
	{
		assertEquals(true, LittleRecursions.isPalindrome("tacocat"));
	}
	
	/**
	 * Testing isPalindrome() with an empty string.
	 */
	@Test
	public void testIsPalindromeEmpty()
	{
		assertEquals(true, LittleRecursions.isPalindrome(""));
	}
	
	/**
	 * Testing isPalindrome() with a null string.
	 */
	@Test
	public void testIsPalindromeNull()
	{
		assertEquals(false, LittleRecursions.isPalindrome(null));
	}
	
	/*********** reverseSome() testing ***********/
	/**
	 * Test case for testing reverseSomme() with some numbers and a space.
	 */
	@Test
	public void testReverseSomeWithNumbers()
	{
		assertEquals("CBA", LittleRecursions.reverseSome("ABC 123"));
	}
	
	/**
	 * Test case for testing reverseSome() with an all letter string.
	 */
	@Test
	public void testReverseSomeAllLetters()
	{
		assertEquals("fdsa", LittleRecursions.reverseSome("asdf"));
	}
	
	/**
	 * Testing reverseSome() with a palindrome because why not?
	 */
	@Test
	public void testReverseSomePalindrome()
	{
		assertEquals("tacocat", LittleRecursions.reverseSome("tacocat"));
	}
	
	/*********** gcd() testing ***********/
	/**
	 * Test case for testing gcd().
	 */
	@Test
	public void testGCD()
	{
		
	}
	
	/*********** sumPositive() testing ***********/
	/**
	 * Testing sumPositive() with an array of only positives
	 */
	@Test
	public void testSumPositiveWithPositives()
	{
		int[] temp = {
			1, 2, 3, 4, 5
		};
		
		assertEquals(15, LittleRecursions.sumPositive(temp));
	}
	
	/**
	 * Testing sumPositive() with some positives and some negatives, such is life.
	 */
	@Test
	public void testSumPositiveMixed()
	{
		int[] temp = {
			1, -4, 3, -6, 10
		};
		
		assertEquals(14, LittleRecursions.sumPositive(temp));
	}
	
	/**
	 * Testing sumPositive() with all negative values.
	 */
	@Test
	public void testSumPositiveWithNegatives()
	{
		int[] temp = {
			-1, -4, -1243
		};
		
		assertEquals(0, LittleRecursions.sumPositive(temp));
	}

	/**
	 * Testing sumPositive() with an empty array.
	 */
	@Test
	public void testSumPositiveEmpty()
	{
		int[] temp = new int[0];
		assertEquals(0, LittleRecursions.sumPositive(temp));
	}
	
	/**
	 * Testing sumPositive() with a null array.
	 */
	@Test
	public void testSumPositiveNull()
	{
		int[] temp = null;
		assertEquals(0, LittleRecursions.sumPositive(temp));
	}
}
